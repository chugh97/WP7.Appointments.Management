//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace WP7.Appointments.Service.Proxy.AppointmentServiceClient {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Resource", Namespace="http://schemas.datacontract.org/2004/07/WP7.Appointments.DataContracts")]
    public partial class Resource : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Slot", Namespace="http://schemas.datacontract.org/2004/07/WP7.Appointments.DataContracts")]
    public partial class Slot : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.TimeSpan EndTimeField;
        
        private int IdField;
        
        private System.TimeSpan StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.datacontract.org/2004/07/WP7.Appointments.DataContracts")]
    public partial class Customer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.ContactInformation> ContactInformationField;
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.ContactInformation> ContactInformation {
            get {
                return this.ContactInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactInformationField, value) != true)) {
                    this.ContactInformationField = value;
                    this.RaisePropertyChanged("ContactInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContactInformation", Namespace="http://schemas.datacontract.org/2004/07/WP7.Appointments.DataContracts")]
    public partial class ContactInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ContactAttributeKeyField;
        
        private string ContactAttributeValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactAttributeKey {
            get {
                return this.ContactAttributeKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactAttributeKeyField, value) != true)) {
                    this.ContactAttributeKeyField = value;
                    this.RaisePropertyChanged("ContactAttributeKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactAttributeValue {
            get {
                return this.ContactAttributeValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactAttributeValueField, value) != true)) {
                    this.ContactAttributeValueField = value;
                    this.RaisePropertyChanged("ContactAttributeValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AppointmentServiceClient.IAppointmentService")]
    public interface IAppointmentService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAppointmentService/GetResourcesByDate", ReplyAction="http://tempuri.org/IAppointmentService/GetResourcesByDateResponse")]
        System.IAsyncResult BeginGetResourcesByDate(System.DateTime date, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Resource> EndGetResourcesByDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAppointmentService/GetAllAvailableSlots", ReplyAction="http://tempuri.org/IAppointmentService/GetAllAvailableSlotsResponse")]
        System.IAsyncResult BeginGetAllAvailableSlots(int resourceId, System.DateTime date, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Slot> EndGetAllAvailableSlots(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAppointmentService/BookAppointment", ReplyAction="http://tempuri.org/IAppointmentService/BookAppointmentResponse")]
        System.IAsyncResult BeginBookAppointment(System.DateTime date, int resourceId, int slotId, WP7.Appointments.Service.Proxy.AppointmentServiceClient.Customer customer, System.AsyncCallback callback, object asyncState);
        
        void EndBookAppointment(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAppointmentServiceChannel : WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetResourcesByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetResourcesByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Resource> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Resource>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllAvailableSlotsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllAvailableSlotsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Slot> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Slot>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AppointmentServiceClient : System.ServiceModel.ClientBase<WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService>, WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService {
        
        private BeginOperationDelegate onBeginGetResourcesByDateDelegate;
        
        private EndOperationDelegate onEndGetResourcesByDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetResourcesByDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllAvailableSlotsDelegate;
        
        private EndOperationDelegate onEndGetAllAvailableSlotsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllAvailableSlotsCompletedDelegate;
        
        private BeginOperationDelegate onBeginBookAppointmentDelegate;
        
        private EndOperationDelegate onEndBookAppointmentDelegate;
        
        private System.Threading.SendOrPostCallback onBookAppointmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public AppointmentServiceClient() {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppointmentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppointmentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetResourcesByDateCompletedEventArgs> GetResourcesByDateCompleted;
        
        public event System.EventHandler<GetAllAvailableSlotsCompletedEventArgs> GetAllAvailableSlotsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> BookAppointmentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService.BeginGetResourcesByDate(System.DateTime date, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetResourcesByDate(date, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Resource> WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService.EndGetResourcesByDate(System.IAsyncResult result) {
            return base.Channel.EndGetResourcesByDate(result);
        }
        
        private System.IAsyncResult OnBeginGetResourcesByDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime date = ((System.DateTime)(inValues[0]));
            return ((WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService)(this)).BeginGetResourcesByDate(date, callback, asyncState);
        }
        
        private object[] OnEndGetResourcesByDate(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Resource> retVal = ((WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService)(this)).EndGetResourcesByDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetResourcesByDateCompleted(object state) {
            if ((this.GetResourcesByDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetResourcesByDateCompleted(this, new GetResourcesByDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetResourcesByDateAsync(System.DateTime date) {
            this.GetResourcesByDateAsync(date, null);
        }
        
        public void GetResourcesByDateAsync(System.DateTime date, object userState) {
            if ((this.onBeginGetResourcesByDateDelegate == null)) {
                this.onBeginGetResourcesByDateDelegate = new BeginOperationDelegate(this.OnBeginGetResourcesByDate);
            }
            if ((this.onEndGetResourcesByDateDelegate == null)) {
                this.onEndGetResourcesByDateDelegate = new EndOperationDelegate(this.OnEndGetResourcesByDate);
            }
            if ((this.onGetResourcesByDateCompletedDelegate == null)) {
                this.onGetResourcesByDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetResourcesByDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetResourcesByDateDelegate, new object[] {
                        date}, this.onEndGetResourcesByDateDelegate, this.onGetResourcesByDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService.BeginGetAllAvailableSlots(int resourceId, System.DateTime date, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllAvailableSlots(resourceId, date, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Slot> WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService.EndGetAllAvailableSlots(System.IAsyncResult result) {
            return base.Channel.EndGetAllAvailableSlots(result);
        }
        
        private System.IAsyncResult OnBeginGetAllAvailableSlots(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int resourceId = ((int)(inValues[0]));
            System.DateTime date = ((System.DateTime)(inValues[1]));
            return ((WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService)(this)).BeginGetAllAvailableSlots(resourceId, date, callback, asyncState);
        }
        
        private object[] OnEndGetAllAvailableSlots(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Slot> retVal = ((WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService)(this)).EndGetAllAvailableSlots(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllAvailableSlotsCompleted(object state) {
            if ((this.GetAllAvailableSlotsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllAvailableSlotsCompleted(this, new GetAllAvailableSlotsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllAvailableSlotsAsync(int resourceId, System.DateTime date) {
            this.GetAllAvailableSlotsAsync(resourceId, date, null);
        }
        
        public void GetAllAvailableSlotsAsync(int resourceId, System.DateTime date, object userState) {
            if ((this.onBeginGetAllAvailableSlotsDelegate == null)) {
                this.onBeginGetAllAvailableSlotsDelegate = new BeginOperationDelegate(this.OnBeginGetAllAvailableSlots);
            }
            if ((this.onEndGetAllAvailableSlotsDelegate == null)) {
                this.onEndGetAllAvailableSlotsDelegate = new EndOperationDelegate(this.OnEndGetAllAvailableSlots);
            }
            if ((this.onGetAllAvailableSlotsCompletedDelegate == null)) {
                this.onGetAllAvailableSlotsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllAvailableSlotsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllAvailableSlotsDelegate, new object[] {
                        resourceId,
                        date}, this.onEndGetAllAvailableSlotsDelegate, this.onGetAllAvailableSlotsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService.BeginBookAppointment(System.DateTime date, int resourceId, int slotId, WP7.Appointments.Service.Proxy.AppointmentServiceClient.Customer customer, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBookAppointment(date, resourceId, slotId, customer, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService.EndBookAppointment(System.IAsyncResult result) {
            base.Channel.EndBookAppointment(result);
        }
        
        private System.IAsyncResult OnBeginBookAppointment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime date = ((System.DateTime)(inValues[0]));
            int resourceId = ((int)(inValues[1]));
            int slotId = ((int)(inValues[2]));
            WP7.Appointments.Service.Proxy.AppointmentServiceClient.Customer customer = ((WP7.Appointments.Service.Proxy.AppointmentServiceClient.Customer)(inValues[3]));
            return ((WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService)(this)).BeginBookAppointment(date, resourceId, slotId, customer, callback, asyncState);
        }
        
        private object[] OnEndBookAppointment(System.IAsyncResult result) {
            ((WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService)(this)).EndBookAppointment(result);
            return null;
        }
        
        private void OnBookAppointmentCompleted(object state) {
            if ((this.BookAppointmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BookAppointmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BookAppointmentAsync(System.DateTime date, int resourceId, int slotId, WP7.Appointments.Service.Proxy.AppointmentServiceClient.Customer customer) {
            this.BookAppointmentAsync(date, resourceId, slotId, customer, null);
        }
        
        public void BookAppointmentAsync(System.DateTime date, int resourceId, int slotId, WP7.Appointments.Service.Proxy.AppointmentServiceClient.Customer customer, object userState) {
            if ((this.onBeginBookAppointmentDelegate == null)) {
                this.onBeginBookAppointmentDelegate = new BeginOperationDelegate(this.OnBeginBookAppointment);
            }
            if ((this.onEndBookAppointmentDelegate == null)) {
                this.onEndBookAppointmentDelegate = new EndOperationDelegate(this.OnEndBookAppointment);
            }
            if ((this.onBookAppointmentCompletedDelegate == null)) {
                this.onBookAppointmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBookAppointmentCompleted);
            }
            base.InvokeAsync(this.onBeginBookAppointmentDelegate, new object[] {
                        date,
                        resourceId,
                        slotId,
                        customer}, this.onEndBookAppointmentDelegate, this.onBookAppointmentCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService CreateChannel() {
            return new AppointmentServiceClientChannel(this);
        }
        
        private class AppointmentServiceClientChannel : ChannelBase<WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService>, WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService {
            
            public AppointmentServiceClientChannel(System.ServiceModel.ClientBase<WP7.Appointments.Service.Proxy.AppointmentServiceClient.IAppointmentService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetResourcesByDate(System.DateTime date, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = date;
                System.IAsyncResult _result = base.BeginInvoke("GetResourcesByDate", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Resource> EndGetResourcesByDate(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Resource> _result = ((System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Resource>)(base.EndInvoke("GetResourcesByDate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllAvailableSlots(int resourceId, System.DateTime date, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = resourceId;
                _args[1] = date;
                System.IAsyncResult _result = base.BeginInvoke("GetAllAvailableSlots", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Slot> EndGetAllAvailableSlots(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Slot> _result = ((System.Collections.ObjectModel.ObservableCollection<WP7.Appointments.Service.Proxy.AppointmentServiceClient.Slot>)(base.EndInvoke("GetAllAvailableSlots", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBookAppointment(System.DateTime date, int resourceId, int slotId, WP7.Appointments.Service.Proxy.AppointmentServiceClient.Customer customer, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = date;
                _args[1] = resourceId;
                _args[2] = slotId;
                _args[3] = customer;
                System.IAsyncResult _result = base.BeginInvoke("BookAppointment", _args, callback, asyncState);
                return _result;
            }
            
            public void EndBookAppointment(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("BookAppointment", _args, result);
            }
        }
    }
}
